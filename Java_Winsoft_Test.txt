Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }

Solution:- 

import java.util.*;
public class MergeArraysByConstraints {
  public static void merge(int X[], int Y[], int m, int n) {
    int k = m + n + 1; 
       while (m >= 0 && n >= 0) {
          if (X[m] > Y[n]) {
              X[k--] = X[m--];
           } else {
              X[k--] = Y[n--];
           }
        }

        while (n >= 0) {
            X[k--] = Y[n--];
        }
    }

    public static void rearrange(int X[], int Y[], int m, int n) {
        if (m == 0) {
            return; 
        }

        int k = 0;
        for (int i = 0; i < m; i++) {
            if (X[i] != 0) {
                X[k++] = X[i];
            }
        }

        merge(X, Y, k - 1, n - 1);
    }

    public static void main(String[] args) {
        int X[] = {0, 2, 0, 3, 0, 5, 6, 0, 0};
        int Y[] = {1, 8, 9, 10, 15};
        int m = X.length;
        int n = Y.length;

        rearrange(X, Y, m, n);

        System.out.print("Merged array: ");
        for (int i = 0; i < m; i++) {
            System.out.print(X[i] + " ");
        }
    }
}

Output:-
Merged array: 1 2 3 5 6 8 9 10 15 

Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

Solution:- 
public class MaximumSumPath {
    public static int maxSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        
        int i = 0, j = 0;
        int sumX = 0, sumY = 0, maxSum = 0;
        
        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                sumX += X[i++];
            } else if (X[i] > Y[j]) {
                sumY += Y[j++];
            } else { // common element found
                maxSum += Math.max(sumX, sumY); // add maximum sum so far
                maxSum += X[i]; // add the common element
                sumX = 0;
                sumY = 0;
                i++;
                j++;
            }
        }

        // Add remaining elements of X[] if any
        while (i < m) {
            sumX += X[i++];
        }

        // Add remaining elements of Y[] if any
        while (j < n) {
            sumY += Y[j++];
        }

        // Add the maximum of remaining sums to maxSum
        maxSum += Math.max(sumX, sumY);

        return maxSum;
    }

    public static void main(String[] args) {
        int[] X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 };
        int[] Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 };
        int maxSum = maxSumPath(X, Y);
        System.out.println("The maximum sum path is: " + maxSum);
    }
}

Output:-
The maximum sum path is: 199
Q3:Write a Java Program to count the number of words in a string using HashMap.

import java.util.*;
public class Countwords {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.println("Enter a string: ");
 String str = sc.nextLine();
 String[] words = str.split(" ");
 Map<String, Integer> wordCount = new HashMap<>();
for (String word : words) {
if (wordCount.containsKey(word)) {
wordCount.put(word, wordCount.get(word) + 1);
 } else {
 wordCount.put(word, 1);
 }
}
System.out.println("Word count using HashMap:");
for (Map.Entry<String, Integer> entry : wordCount.entrySet()) {
System.out.println(entry.getKey() + " : " + entry.getValue());
  }
 }
}

Output:-
	Enter a string: 
This is a test a winsoft Technologies test
Word count using HashMap:
winsoft : 1
a : 2
test : 2
This : 1
is : 1
Technologies : 1


Q4:Write a Java Program to find the duplicate characters in a string.

import java.util.*;

public class CharacterFinder {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.println("Enter a string: ");
String inputString = sc.nextLine();
Map<Character, Integer> charCount = new HashMap<>();
 for (char c : inputString.toCharArray()) {
  charCount.put(c, charCount.getOrDefault(c, 0) + 1);
 }
  System.out.println("Duplicate characters in '" + inputString + "':");
  for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
   if (entry.getValue() > 1) {
 System.out.println(entry.getKey() + " : " + entry.getValue());
   }
  }
 }
}

Output :- 
Enter a string: 
Winsoft Technologies
Duplicate characters in 'Winsoft Technologies':
e : 2
i : 2
n : 2
o : 3
s : 2